{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Schedule Service using APScheduler",
        "description": "Install and configure APScheduler with FastAPI to handle background job scheduling.",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "details": "1. Add APScheduler to requirements.txt and install\n2. Create scheduler service and integrate with FastAPI startup/shutdown\n3. Configure scheduler with basic settings\n4. Add environment variable control for scheduler\n5. Create reminder service for task notifications\n\n```python\n# requirements.txt\napscheduler\n\n# app/services/scheduler_service.py\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\nfrom apscheduler.triggers.cron import CronTrigger\n\nclass SchedulerService:\n    def __init__(self):\n        self.scheduler = AsyncIOScheduler(timezone='Asia/Kolkata')\n        \n    def start(self):\n        if not self.scheduler.running:\n            self.scheduler.start()\n            \n    def shutdown(self):\n        if self.scheduler.running:\n            self.scheduler.shutdown()\n            \n    def add_cron_job(self, func, **cron_kwargs):\n        return self.scheduler.add_job(func, CronTrigger(**cron_kwargs))\n\n# app/services/reminder_service.py\n# Contains task_reminder_job that writes Prompt notifications for tasks\n# scheduled in the current minute (IST)\n\n# app/main.py\nfrom app.services.scheduler_service import SchedulerService\nfrom app.services.reminder_service import task_reminder_job\nimport os\n\nscheduler_service = SchedulerService()\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    create_db_and_tables()\n    \n    # Only enable scheduler if environment variable is set\n    enable_scheduler = os.getenv(\"ENABLE_SCHEDULER\", \"\").lower() in [\"true\", \"1\", \"yes\"]\n    if enable_scheduler:\n        scheduler_service.start()\n        # Register reminder job to run every minute at second=0\n        scheduler_service.add_cron_job(task_reminder_job, second=0)\n\n@app.on_event(\"shutdown\")\nasync def shutdown_event():\n    scheduler_service.shutdown()\n```",
        "testStrategy": "1. Test scheduler starts and stops with FastAPI app\n2. Verify jobs can be added to the scheduler\n3. Test basic cron job functionality\n4. Test ENABLE_SCHEDULER environment variable controls scheduler activation\n5. Test reminder job functionality with mock data",
        "subtasks": [
          {
            "id": 1,
            "title": "Add APScheduler to requirements.txt and install",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Create scheduler service with Asia/Kolkata timezone",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Integrate scheduler with FastAPI startup/shutdown",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Add ENABLE_SCHEDULER environment variable control",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Create reminder service with task_reminder_job",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Add metrics and logging for job runs",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Implement configuration for reminder advance notice windows",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "Schedule Cron Job for Task Reminders",
        "description": "Create and schedule a cron job that runs every minute to check for tasks scheduled for the current minute and send notifications with future support for AI-enhanced messages.",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "1. Create task reminder function that checks for tasks scheduled for the current minute\n2. Store notifications as Prompts for reliability and attempt WebSocket broadcast\n3. Register the cron job to run every minute (second=0) in IST timezone\n\n```python\n# app/services/task_reminder.py\nfrom datetime import datetime\nfrom sqlmodel import select\nfrom app.models.task import Task\nfrom app.core.database import get_session\nfrom app.models.prompt import Prompt\nimport httpx\nimport pytz\n\nasync def check_current_minute_tasks():\n    \"\"\"Check for tasks scheduled for the current minute and send reminders\"\"\"\n    # Use Asia/Kolkata timezone\n    ist_tz = pytz.timezone('Asia/Kolkata')\n    now = datetime.now(ist_tz)\n    \n    with get_session() as session:\n        # Find tasks scheduled for the current minute\n        query = select(Task).where(\n            Task.scheduled_time.year == now.year,\n            Task.scheduled_time.month == now.month,\n            Task.scheduled_time.day == now.day,\n            Task.scheduled_time.hour == now.hour,\n            Task.scheduled_time.minute == now.minute,\n            Task.status.not_in(['completed', 'discarded'])\n        )\n        \n        current_tasks = session.exec(query).all()\n        \n        for task in current_tasks:\n            # Generate reminder message (simple for now, AI enhancement later)\n            reminder_message = generate_reminder(task)\n            \n            # Store as Prompt for reliability\n            store_reminder_prompt(session, task.user_id, task.title, reminder_message, task.id)\n            \n            # Best-effort WebSocket broadcast\n            await send_notification(task.user_id, task.title, reminder_message, task.id)\n\ndef generate_reminder(task) -> str:\n    \"\"\"Generate reminder message (simple fallback for now)\"\"\"\n    return f\"Reminder: '{task.title}' is scheduled for now!\"\n\ndef store_reminder_prompt(session, user_id: int, title: str, message: str, task_id: int):\n    \"\"\"Store notification as a Prompt for reliability\"\"\"\n    try:\n        prompt = Prompt(\n            user_id=user_id,\n            title=f\"Task Reminder: {title}\",\n            content=message,\n            metadata={\"task_id\": task_id}\n        )\n        session.add(prompt)\n        session.commit()\n    except Exception as e:\n        print(f\"Failed to store reminder prompt: {e}\")\n\nasync def send_notification(user_id: int, title: str, message: str, task_id: int):\n    \"\"\"Send notification using the WebSocket notification endpoint (best-effort)\"\"\"\n    try:\n        payload = {\n            \"user_id\": user_id,\n            \"title\": f\"Task Reminder: {title}\",\n            \"message\": message,\n            \"data\": {\"task_id\": task_id}\n        }\n        \n        async with httpx.AsyncClient() as client:\n            await client.post(\n                \"http://localhost:8000/api/v1/notification\",\n                json=payload,\n                timeout=5.0\n            )\n    except Exception as e:\n        print(f\"Failed to send notification: {e}\")\n\n# app/main.py (add to startup_event)\nfrom app.services.task_reminder import check_current_minute_tasks\nimport os\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    create_db_and_tables()\n    \n    # Only start scheduler if enabled\n    if os.getenv(\"ENABLE_SCHEDULER\", \"false\").lower() == \"true\":\n        scheduler_service.start()\n        \n        # Schedule task reminder to run every minute at second=0 in IST timezone\n        scheduler_service.add_cron_job(\n            func=check_current_minute_tasks,\n            minute='*',  # Every minute\n            second='0',  # At the 0th second\n            timezone='Asia/Kolkata',\n            id='task_reminder_job',\n            replace_existing=True\n        )\n```",
        "testStrategy": "1. Test task query logic with various time scenarios in IST timezone\n2. Test Prompt storage for notifications\n3. Test WebSocket notification sending with mock HTTP client\n4. Verify cron job runs at correct intervals (second=0 of each minute)\n5. Test ENABLE_SCHEDULER environment variable control\n6. End-to-end test with actual tasks and notifications\n7. Unit tests for reminder job selection logic with in-memory DB",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement current-minute task selection logic",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Add Prompt storage for reliable notifications",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement WebSocket broadcast (best-effort)",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Configure cron job with IST timezone and second=0",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Add ENABLE_SCHEDULER guard in app/main.py",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Create unit tests for reminder job selection logic",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Prepare for future AI-enhanced reminders with fallback",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-08-14T11:45:00.000Z",
      "updated": "2025-08-14T11:53:34.340Z",
      "description": "Simplified scheduler implementation - just 2 focused tasks"
    }
  }
}