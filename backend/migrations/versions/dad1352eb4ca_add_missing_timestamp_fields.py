"""add missing timestamp fields

Revision ID: dad1352eb4ca
Revises: 570e3b109389
Create Date: 2025-08-08 22:20:38.543059

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'dad1352eb4ca'
down_revision: Union[str, Sequence[str], None] = '570e3b109389'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('logs',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('log_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('log_id')
    )
    op.add_column('ai_contexts', sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False))
    op.add_column('ai_contexts', sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False))
    op.add_column('day_logs', sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False))
    op.add_column('day_logs', sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False))
    op.add_column('goals', sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False))
    op.add_column('goals', sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False))
    op.add_column('job_metrics', sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False))
    op.add_column('job_metrics', sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False))
    op.add_column('progress_logs', sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False))
    op.add_column('progress_logs', sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False))
    op.add_column('prompts', sa.Column('completed_at', sa.DateTime(), nullable=True))
    op.alter_column('prompts', 'response_text',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.create_index(op.f('ix_prompts_user_id'), 'prompts', ['user_id'], unique=False)
    op.drop_constraint(op.f('prompts_user_id_fkey'), 'prompts', type_='foreignkey')
    op.add_column('tasks', sa.Column('deadline', sa.DateTime(), nullable=True))
    op.add_column('users', sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False))
    op.add_column('users', sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'created_at')
    op.drop_column('tasks', 'deadline')
    op.create_foreign_key(op.f('prompts_user_id_fkey'), 'prompts', 'users', ['user_id'], ['telegram_id'])
    op.drop_index(op.f('ix_prompts_user_id'), table_name='prompts')
    op.alter_column('prompts', 'response_text',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_column('prompts', 'completed_at')
    op.drop_column('progress_logs', 'updated_at')
    op.drop_column('progress_logs', 'created_at')
    op.drop_column('job_metrics', 'updated_at')
    op.drop_column('job_metrics', 'created_at')
    op.drop_column('goals', 'updated_at')
    op.drop_column('goals', 'created_at')
    op.drop_column('day_logs', 'updated_at')
    op.drop_column('day_logs', 'created_at')
    op.drop_column('ai_contexts', 'updated_at')
    op.drop_column('ai_contexts', 'created_at')
    op.drop_table('logs')
    # ### end Alembic commands ###
